{
	"info": {
		"_postman_id": "545e6c3f-9468-4115-a5f8-2c4aedda23ea",
		"name": "Comment feature tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26184202"
	},
	"item": [
		{
			"name": "Preparation",
			"item": [
				{
					"name": "Создание первой категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного идентификатора 'id' у категории\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'name' у категории\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, 'Параметр \"name\" должен быть равен \"Название первой категории\"').to.eql(\"Название первой категории\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Название первой категории\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание первого пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного идентификатора 'id' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'name' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, 'Параметр \"name\" должен быть равен \"Даниил\"').to.eql(\"Даниил\");\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'email' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, 'Параметр \"email\" должен быть равен \"daniil@yandex.ru\"').to.eql(\"daniil@yandex.ru\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Даниил\",\r\n    \"email\": \"daniil@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание второго пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного идентификатора 'id' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'name' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, 'Параметр \"name\" должен быть равен \"Максим\"').to.eql(\"Максим\");\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'email' у пользователя\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, 'Параметр \"email\" должен быть равен \"maxim@yandex.ru\"').to.eql(\"maxim@yandex.ru\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Максим\",\r\n    \"email\": \"maxim@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание первого события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного идентификатора 'id' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'annotation' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('annotation');\r",
									"    pm.expect(jsonData.annotation, 'Параметр \"annotation\" должен быть равен \"АннотацияСобытияДлинойБольшеДвадцатиСимволов\"').to.eql(\"АннотацияСобытияДлинойБольшеДвадцатиСимволов\");\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'confirmedRequests' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
									"    pm.expect(jsonData.confirmedRequests, 'Параметр \"confirmedRequests\" должен быть равен \"0\"').to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Провека правильности созданного поля 'description' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData.description, 'Параметр \"description\" должен быть равен \"ОписаниеСобытияДлинойБольшеДвадцатиСимволов\"').to.eql(\"ОписаниеСобытияДлинойБольшеДвадцатиСимволов\");\r",
									"});\r",
									"\r",
									"pm.test(\"Провека наличия созданного поля 'category' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');\r",
									"});\r",
									"\r",
									"pm.test(\"Провека наличия созданного поля 'createdOn' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Провека наличия созданного поля 'eventDate' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Провека наличия созданного поля 'initiator' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('initiator');\r",
									"});\r",
									"\r",
									"pm.test(\"Провека наличия созданного поля 'location' у события\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"АннотацияСобытияДлинойБольшеДвадцатиСимволов\",\r\n    \"category\": \"1\",\r\n    \"description\": \"ОписаниеСобытияДлинойБольшеДвадцатиСимволов\",\r\n    \"eventDate\": \"2024-05-18 00:00:00\",\r\n    \"location\": {\r\n        \"lat\": \"100\",\r\n        \"lon\": \"100\"\r\n    },\r\n    \"paid\": \"false\",\r\n    \"participantLimit\": \"10\",\r\n    \"requestModeration\": \"false\",\r\n    \"title\": \"НазваниеСобытия\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Создание комментария без контента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments?userId=1&eventId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария с неправильным userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"ТестТест\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments?userId=5&eventId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "userId",
									"value": "5"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария с неправильным eventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"ТестТест\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments?userId=1&eventId=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с неправильным userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Тело обновленного комментария\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/:commentId?userId=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "userId",
									"value": "5"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с неправильным commentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Тело обновленного комментария\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/:commentId?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария с неправильным userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/comments/:commentId?userId=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "userId",
									"value": "5"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария с неправильным commentId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/comments/:commentId?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Создание первого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности созданного идентификатора 'id' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности созданного поля 'content' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('content');\r",
							"    pm.expect(jsonData.content, 'Параметр \"content\" должен быть равен \"Тело нового комментария\"').to.eql(\"Тело нового комментария\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Тело нового комментария\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments?userId=1&eventId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария непричастным пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Тело обновленного комментария\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:commentId?userId=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "2"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание второго комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности созданного идентификатора 'id' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 2').to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности созданного поля 'content' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('content');\r",
							"    pm.expect(jsonData.content, 'Параметр \"content\" должен быть равен \"Тело второго комментария\"').to.eql(\"Тело второго комментария\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Тело второго комментария\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments?userId=1&eventId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение первого комментария по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности полученного идентификатора 'id' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности полученного поля 'content' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('content');\r",
							"    pm.expect(jsonData.content, 'Параметр \"content\" должен быть равен \"Тело нового комментария\"').to.eql(\"Тело нового комментария\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка списка полученных комментариев\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка всех комментариев по id события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка списка полученных комментариев\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление первого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности обновленного идентификатора 'id' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, 'Параметр \"id\" должен быть равен 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Провека правильности обновленного поля 'content' у комментария\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('content');\r",
							"    pm.expect(jsonData.content, 'Параметр \"content\" должен быть равен \"Тело обновленного комментария\"').to.eql(\"Тело обновленного комментария\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"Тело обновленного комментария\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/:commentId?userId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление первого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/comments/:commentId?userId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка всех комментариев по id пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200 или 201 и содержать данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка списка полученных комментариев\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/users/:userId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}